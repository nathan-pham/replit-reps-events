type Submission {
    id: ID!
    title: String!
    summary: String!
    description: String!
    images: [String!]!
    video: String!

    _createdAt: DateTime!
}

type Event {
    id: ID!
    hero: URL!
    heroY: Float!
    title: String!
    description: String!
    blocks: [EventBlock!]!
    published: Boolean!
    submissions: [ID!]!
    users: [ID!]!
    author: ID!

    _createdAt: DateTime!
}

type EventBlock {
    id: ID!
    type: String!
    content: String!
    children: [EventBlock]!
}

input EventBlockInput {
    id: ID!
    type: String!
    content: String!
    children: [EventBlockInput]!
}

# enum EventBlockType {
#     TITLE
#     DIVIDER
#     PARAGRAPH
#     IMAGE
#     VIDEO
#     HTML
#     OL_LIST
#     UL_LIST
#     LIST_CHILD
# }

extend type Query {
    event(id: ID!): Event!
    eventImages: [String!]!
}

extend type Mutation {
    createEvent(title: String!, tagline: String!, published: Boolean!): Event!
    deleteEvent(id: ID!): Event!

    # update event blocks
    removeEventBlock(eventId: ID!, blockId: ID!): Event!
    updateEventBlock(
        eventId: ID!
        blockId: ID!
        block: EventBlockInput!
    ): Event!
    moveEventBlock(eventId: ID!, blockId: ID!, newIndex: Int!): Event!

    # update global event details
    updateEventHero(id: ID!, hero: String, heroY: Float): Event!
    updateEventDetails(
        id: ID!
        title: String!
        tagline: String!
        published: Boolean!
    ): Event!
}
